# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.setting import Setting
from openapi_server import util

from openapi_server.models.setting import Setting  # noqa: E501

class InlineResponse200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, settings=None):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI

        :param settings: The settings of this InlineResponse200.  # noqa: E501
        :type settings: List[Setting]
        """
        self.openapi_types = {
            'settings': List[Setting]
        }

        self.attribute_map = {
            'settings': 'settings'
        }

        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def settings(self):
        """Gets the settings of this InlineResponse200.


        :return: The settings of this InlineResponse200.
        :rtype: List[Setting]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this InlineResponse200.


        :param settings: The settings of this InlineResponse200.
        :type settings: List[Setting]
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings
