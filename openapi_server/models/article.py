# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Article(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_id=None, name=None, category_id=None):  # noqa: E501
        """Article - a model defined in OpenAPI

        :param article_id: The article_id of this Article.  # noqa: E501
        :type article_id: int
        :param name: The name of this Article.  # noqa: E501
        :type name: str
        :param category_id: The category_id of this Article.  # noqa: E501
        :type category_id: int
        """
        self.openapi_types = {
            'article_id': int,
            'name': str,
            'category_id': int
        }

        self.attribute_map = {
            'article_id': 'article_id',
            'name': 'name',
            'category_id': 'category_id'
        }

        self._article_id = article_id
        self._name = name
        self._category_id = category_id

    @classmethod
    def from_dict(cls, dikt) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Article of this Article.  # noqa: E501
        :rtype: Article
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_id(self):
        """Gets the article_id of this Article.

        ID 编号  # noqa: E501

        :return: The article_id of this Article.
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this Article.

        ID 编号  # noqa: E501

        :param article_id: The article_id of this Article.
        :type article_id: int
        """
        if article_id is None:
            raise ValueError("Invalid value for `article_id`, must not be `None`")  # noqa: E501

        self._article_id = article_id

    @property
    def name(self):
        """Gets the name of this Article.

        名称  # noqa: E501

        :return: The name of this Article.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Article.

        名称  # noqa: E501

        :param name: The name of this Article.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category_id(self):
        """Gets the category_id of this Article.

        分组  # noqa: E501

        :return: The category_id of this Article.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Article.

        分组  # noqa: E501

        :param category_id: The category_id of this Article.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id
